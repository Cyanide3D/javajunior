1.
Создадим небольшое приложение Фуд-Корд
Как мы знаем, в ТЦ на фудкортах бывают как заведения быстрого обслуживания,
так и рестораны, в которых кухня гораздо сложнее и уровень обслуживания выше.
С помощью приложения мы сможем выбрать заведение, в которое хотим зайти, а так же действия, по типу:
	1. Посмотреть меню
	2. Сделать заказ меню
	3. Позвать официанта
	4. Попросить счет
	5. Оплатить счет
	6. Оставить отзыв заведению

Создадим пакет foodappinterface
Чтобы сделать разработку проще и архитектурно правильнее, создадим для начала интерфейсы:
CateringInterface (интерфейс, описывающих в общем виде любой тип заведения)
	методы (все методы будут void):
	nameOfPlace() (имя заведения) - общее, т.к. у всех заведений есть имя
	placeOnOrder(String food) (сделать заказ) - везде нужно оплачивать заказ, просто в ресторане по счету, а кафе быстрого питания - прямо на кассе
	provideFeedback(String feedback) (оставить отзыв)
RestaurantInterface ( интерфейс, реализующий порядок действий в ресторанах)
	методы (все методы будут void):
	CallTheWaiter() (позвать официанта)
	getMenu() (попросить меню)
	payTheBill() (оплатить счет)
	payATip() (оставить чаевые)
CafeInterface (интерфейс, реализующий порядок действий в кафе быстрого питания)
	методы (все методы будут void):
	viewTheAssortement() (выбрать из ассортимента)
	playAtTheCashRegister() (оплатить заказ на кассе)

Интерфейсы Restaurant и Cafe наследуются от интерфейса Catering
Далее вам нужно будет создать классы:
Catering (родительский класс, реализующий методы интерфейса CateringInterface
Поле:
private String name;

Restaurant (класс наследуется от класс Catering) а так же реализует интерфейс RestaurantInterface
Cafe (класс наследуется от класс Catering) а так же реализует интерфейс CafeInterface
Поле:
private List<String> menu = new ArrayList<>();

Все эти методы должны реализовывать простой вывод в консоль конкретного действия.
Создать класс Testing и в нем создать два новых объекта Cafe и Restaurant, вызвать все методы у них.
При создании разумеется вам нужно будет передать List<String> menu, заполненные вами любымы блюдами.
А можете иницилизировать menu прямо в объекте.


2.
Попробуйте в новом пакете foodappabstract проделать тот же проект, но вместо интерфейсов используйте абстрактные классы и абстрактные методы.
Наименование будет по тому же типу, только вместо Interface в конце используйте Abstract
Но благодаря возможности в абстрактном классе реализовать не абстрактные методы, попробуйте обойтись без класса Catering.
Создайте класс Testing и протестируйте работу своего второго проекта.


3.
В пакете foodAppAbstract создайте класс TestintPolimorfizm, а в нем метод main.
Создайты объекты типа CatheringAbstract из объекта наследника Cafe
(CatheringAbstract catheringAbstractCafe = new Cafe(...) )
И создйте такой же catheringAbstractRestaurant, только из объекта Restaurant
Вызовите методы, доступные данному объекту. Вы увидите, что будете ограничены только методами, описанными в классе CatheringAbstract
А теперь попробуйте создайте объекта типа Cafe и Restaurant и присвойте им ссылку на свои объекта типа CatheringAbstract ранее созданные соответственно
Вызовите все остальные доступные методы.
Попробуйте присвоить объекту Cafe объект Restaurant. Напишите в комментарии, почему нельзя его ему присвоить?



