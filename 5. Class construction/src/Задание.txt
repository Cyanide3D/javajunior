1.
Создадим небольшое приложение Фуд-Корт
Как мы знаем, в ТЦ на фудкортах бывают как заведения быстрого обслуживания,
так и рестораны, в которых кухня гораздо сложнее и уровень обслуживания выше.
С помощью приложения мы сможем выбрать заведение, в которое хотим зайти, а так же действия, по типу:
	1. Посмотреть меню
	2. Сделать заказ
	3. Позвать официанта
	4. Попросить счет
	5. Оплатить счет
	6. Оставить отзыв заведению

Создадим пакет foodappinterface
Далее создадим интерфейсы:
CateringInterface (интерфейс, описывающих в общем виде любой тип заведения)
	методы (все методы будут void):
	nameOfPlace() (имя заведения) - общее, т.к. у всех заведений есть имя
	placeOnOrder(String food) (сделать заказ) - заказать позицию из меню
	provideFeedback(String feedback) (оставить отзыв)
RestaurantInterface ( интерфейс, реализующий порядок действий в ресторанах)
	методы (все методы будут void):
	CallTheWaiter() (позвать официанта)
	getMenu() (попросить меню)
	payTheBill() (оплатить счет)
	payATip() (оставить чаевые)
CafeInterface (интерфейс, реализующий порядок действий в кафе быстрого питания)
	методы (все методы будут void):
	viewTheAssortment() (выбрать из ассортимента)
	payAtTheCashRegister() (оплатить заказ на кассе)

Интерфейсы Restaurant и Cafe наследуются от интерфейса Catering
Далее вам нужно будет создать классы:
Catering (родительский класс, реализующий методы интерфейса CateringInterface
Поле:
private String name;

Restaurant (класс наследуется от класса Catering) а так же реализует интерфейс RestaurantInterface
Cafe (класс наследуется от класса Catering) а так же реализует интерфейс CafeInterface
Поле:
private List<String> menu = new ArrayList<>();

При создании конструкторов в дочерних классах не забывайте использовать метод super() в начале конструктора.

Все методы должны осуществлять вывод в консоль конкретного действия.

Создать класс Testing и в нем создать два новых объекта Cafe и Restaurant, вызвать все методы у них.
При создании, разумеется, вам нужно будет передать List<String> menu, заполненный любыми блюдами.
А можете инициализировать menu прямо в объекте.


2.
В новом пакете foodappabstract нужно проделать похожий проект по описанию выше, но вместо интерфейсов используйте абстрактные классы и абстрактные методы.
В этом проекте мы обойдемся без класса Catering, тем самым мы не сможем создавать объекты типа Catering.
Наименование будет по тому же принципу, только вместо Interface в конце используйте Abstract.
Создайте класс Testing и протестируйте работу своего второго проекта.,


3.
В пакете foodAppAbstract создайте класс TestingPolymorphism, а в нем метод main.
Создайте объекты типа CateringAbstract из объекта наследника Cafe
(CateringAbstract cateringAbstractCafe = new Cafe(...) )
Создайте такой же cateringAbstractRestaurant, только из объекта Restaurant.
Вызовите методы, доступные данным объектам. Объясните в комментарии, почему другие методы вызвать нельзя?
А теперь присвойте переменным типа Cafe и переменной типа Restaurant соответственно эти ссылки типов CateringAbstract, созданные ранее.
У нас получается один объект, но 2 разные ссылки на них, вызовите остальные методы.
Попробуйте присвоить объекту Cafe объект Restaurant. Напишите в комментарии, почему нельзя его ему присвоить?
